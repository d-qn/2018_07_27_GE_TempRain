aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light) +
facet_wrap(~timeP)
bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed") +
geom_line(data = mAverageByP, alpha = 0.7,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light) +
facet_wrap(~timeP)
p <- bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light) +
transition_states(timeP, transition_length = 3, state_length = 5)
p
mAverageByP_bg
?transition_states
p <- bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light) +
labs(title = {closest_state} )
transition_states(timeP, transition_length = 3, state_length = 5)
p <- bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light) +
labs(title = {closest_state} ) +
transition_states(timeP, transition_length = 3, state_length = 5)
p <- bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light) +
labs(title = 'Time: {closest_state}' ) +
transition_states(timeP, transition_length = 3, state_length = 5)
p
?animate
sprite_file("sprite_test", fps=2, width = 620, height = 800)
animate(p, renderer = sprite_renderer("sprite_test", fps=2, width = 620, height = 800))
animate(p, renderer = sprite_renderer())
getwd()
?gif_file
?gif_image
animate(p, renderer = sprite_renderer("spriteTest"))
str(p)
p
sprite_file("sprite_test", fps=2, width = 620, height = 800, 6000)
animate(p, renderer = ffmpeg_renderer())
animate(p, renderer = ffmpeg_renderer(file = "test", loop = T))
?ffmpeg_renderer
animate(p, renderer = sprite_renderer())
anim_save("sprite_test")
animate(p, renderer = sprite_renderer()) %>% save_animation("sprite_test")
vid <- animate(p, renderer = ffmpeg_renderer(file = "test", loop = T))
vid <- animate(p, renderer = ffmpeg_renderer(loop = T))
vid <- animate(p, renderer = ffmpeg_renderer())
str(vid)
vid %>% video_file("test.mp4")
video_file(file = "test.mp4")
save_animation(vid, "test.mp4")
vid <- animate(p, renderer = ffmpeg_renderer(options = "stream_loop=-1"))
save_animation(vid, "test.mp4")
spr <- animate(p, renderer = sprite_renderer())
str(spr)
?sprite_file
sprite_file("sprite.test")
spr
save_animation(spr, "test.html")
list(stream_loop = -1)
vid <- animate(p,
renderer = ffmpeg_renderer(options = list(stream_loop = -1)))
vid
save_animation(vid, "test.mp4")
p
p <- bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light)
p + geom_facet(~timeP)
p + facet_wrap(~timeP)
p
p <- bg_chart () +
geom_line(data = df,
aes(x = Month, y = Temperature, group = Year, colour = yAverage), size = 0.1, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "red") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "red", family = font_tw_light)
p + labs("sadfasf") +
facet_wrap(~timeP)
p + labs(title = "sadfasf") +
facet_wrap(~timeP)
bg_chart <- function() {
ggplot() +
geom_hline(yintercept = 0, colour = "darkgrey", alpha = 0.5, size = 0.5) +
scale_x_discrete(name = "", position = "top", expand = c(0.1, 0.1)) +
scale_y_continuous(
name = "", expand = c(0.01, 0),
labels = function(x) paste0(x,'°'), limits = ylim, breaks = scales::pretty_breaks(n = 5)) +
theme_tam(xGridLines = T) +
theme(
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y =  element_line(
color = "#c2c4d6", linetype = "dotted", size = 0.3),
plot.margin = margin(3, 4, 5, 1, "pt"),
axis.line = element_blank()
) +
scale_colour_viridis_c(direction = -1, guide = F)
#scale_colour_gradientn(colours = brewer.pal(7,"Reds"))
}
p + labs(title = "sadfasf") +
facet_wrap(~timeP)
?theme_tam
qplot(mtcars$mpg) +
labs(title = "A catchy title",
subtitle = "a descriptive subtitle") +
theme_tam()
theme_tam
download_meteoSuisseData <- F
cleanOutput <- F
require(lintr)
require(here)
library(tidyverse)
library(magrittr)
library(stringr)
library(knitr)
library(tamMap)
library(hrbrthemes)
library(tamTheme)
library(gganimate)
### Getting data in packages
library(rvest)
library(ggalt)
### Interactive
library(ggiraph)
library(htmltools)
library(swiRcharts)
library(rCharts)
library(highcharter)
### Misc stuff
#require(classInt)
#require(viridis)
input.url <- 'https://www.meteosuisse.admin.ch/product/output/climate-data/homogenous-monthly-data-processing/data/homog_mo_GVE.txt'
rawData.file <- paste0("data/", basename(input.url))
if(download_meteoSuisseData) {
download.file(input.url, destfile = rawData.file)
}
# Read each txt file and save it as CSV
header <- read.table(rawData.file, skip = 27, stringsAsFactors = FALSE,
nrows = 1) %>% unlist(use.names = F)
table <- read.table(rawData.file, skip = 28, stringsAsFactors = FALSE)
colnames(table) <- header
#skim(table)
months <- structure(1:12, names = c('Jan.', 'Fév.',	'Mars',	'Avr.',	'Mai',	'Juin',	'Juil.',	'Août',	'Sept.',	'Oct.',	'Nov.',	'Déc.'))
years_average <-  c(1981, 2010)
table %<>% mutate(
Month = factor(names(months)[match(Month, months)],
levels = names(months)),
)
yAverage <- table %>%
group_by(Year) %>%
summarise(yAverage = mean(Temperature)) %>%
ungroup()
table <- left_join(table,yAverage)
ylim <- table %>% .$Temperature %>% range()
bg_chart <- function() {
ggplot() +
geom_hline(yintercept = 0, colour = "darkgrey", alpha = 0.5, size = 0.5) +
scale_x_discrete(name = "", position = "top", expand = c(0.1, 0.1)) +
scale_y_continuous(
name = "", expand = c(0.01, 0),
labels = function(x) paste0(x,'°'), limits = ylim, breaks = scales::pretty_breaks(n = 5)) +
theme_tam(xGridLines = T) +
theme(
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y =  element_line(
color = "#c2c4d6", linetype = "dotted", size = 0.3),
plot.margin = margin(3, 4, 3, -1, "pt"),
axis.line = element_blank()
) +
scale_colour_identity()
#scale_colour_gradientn(colours = brewer.pal(7,"Reds"))
}
bg_chart () +
geom_xspline(data = table %>% filter(Year < 2018),
aes(x = Month, y = Temperature, group = Year, colour = Year), size = 0.1) +
geom_xspline(data = table %>% filter(Year == 2018),
aes(x = Month, y = Temperature, group = Year, colour = Year), size = 1)
bluered <- c("#2C3891", '#902c5e')
df <- table %>% mutate(
timeP = factor(ifelse(Year <= 1964, "1864-1964", "1965-2018")),
colour = ifelse(timeP == "1864-1964", bluered[1], bluered[2])
)
mAverageByP <- df %>%
group_by(timeP, Month) %>%
summarise(monthlyPAv = mean(Temperature)) %>%
ungroup() %>%
mutate(colour = ifelse(timeP == "1864-1964", bluered[1], bluered[2]))
mAverageByP_bg <- mAverageByP
mAverageByP_bg[mAverageByP_bg$timeP == '1965-2018', "monthlyPAv"] <- mAverageByP_bg[mAverageByP_bg$timeP == '1864-1964', "monthlyPAv"]
#mAverageByP_bg[mAverageByP_bg$timeP == '1864-1964', "monthlyPAv"] <- -10
shift <- mAverageByP %>%
group_by(Month) %>%
summarise(y0 = monthlyPAv[1], y1 = monthlyPAv[2]) %>%
ungroup() %>%
mutate(timeP = factor("1965-2018", levels = c("1864-1964", "1965-2018")))
shift <- rbind(shift %>%
mutate(y1 = y0, timeP = "1864-1964"), shift) %>%
mutate(timeP = as.factor(timeP))
shiftLabel <- shift %>%
mutate(
diff = y1 - y0,
label = ifelse(
diff == 0, "", paste0("+", formatC(diff, digits = 2), "°"))
)
timePLabel <- tibble(
x = 7, y = 7, label = levels(df$timeP),
timeP = factor(levels(df$timeP))) %>%
mutate(colour = ifelse(timeP == "1864-1964", bluered[1], bluered[2]))
p <- bg_chart () +
geom_xspline(data = df,
aes(x = Month, y = Temperature, group = Year, colour = colour), size = 0.07, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1),size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1, colour = colour),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "#b30047") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "#b30047", family = font_tw_light) +
geom_text(data = timePLabel, aes(x = x, y = y, label = label, colour = colour),
family = font_tw_bold, hjust = 0.5, size = 8)
p + labs(title = "sadfasf", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") +
facet_wrap(~timeP)
ap <- p +
labs(title = "Genève chauffe", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") + transition_states(timeP, transition_length = 2, state_length = 4, wrap = F) +
enter_fade() +
exit_fade()
apa <- animate(ap, width = 620 * 2, height = 800 * 2)
anim_save("shift.gif")
apa <- animate(ap, width = 620 * 1.2, height = 800 * 1.2)
anim_save("shift.gif")
mAverageByP_bg
tail(mAverageByP_bg)
mAverageByP_bg
tail(mAverageByP_bg)
bluered <- c("#2C3891", '#902c5e')
df <- table %>% mutate(
timeP = factor(ifelse(Year <= 1964, "1864-1964", "1965-2018")),
colour = ifelse(timeP == "1864-1964", bluered[1], bluered[2])
)
mAverageByP <- df %>%
group_by(timeP, Month) %>%
summarise(monthlyPAv = mean(Temperature)) %>%
ungroup() %>%
mutate(colour = ifelse(timeP == "1864-1964", bluered[1], bluered[2]))
mAverageByP_bg <- mAverageByP
mAverageByP_bg[mAverageByP_bg$timeP == '1965-2018', "monthlyPAv"] <- mAverageByP_bg[mAverageByP_bg$timeP == '1864-1964', "monthlyPAv"]
mAverageByP_bg$colour <- "#2C3891"
#mAverageByP_bg[mAverageByP_bg$timeP == '1864-1964', "monthlyPAv"] <- -10
shift <- mAverageByP %>%
group_by(Month) %>%
summarise(y0 = monthlyPAv[1], y1 = monthlyPAv[2]) %>%
ungroup() %>%
mutate(timeP = factor("1965-2018", levels = c("1864-1964", "1965-2018")))
shift <- rbind(shift %>%
mutate(y1 = y0, timeP = "1864-1964"), shift) %>%
mutate(timeP = as.factor(timeP))
shiftLabel <- shift %>%
mutate(
diff = y1 - y0,
label = ifelse(
diff == 0, "", paste0("+", formatC(diff, digits = 2), "°"))
)
timePLabel <- tibble(
x = 7, y = 7, label = levels(df$timeP),
timeP = factor(levels(df$timeP))) %>%
mutate(colour = ifelse(timeP == "1864-1964", bluered[1], bluered[2]))
p <- bg_chart () +
geom_xspline(data = df,
aes(x = Month, y = Temperature, group = Year, colour = colour), size = 0.07, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1), size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1, colour = colour),
size = 1, linetype = "dashed") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "#b30047") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "#b30047", family = font_tw_light) +
geom_text(data = timePLabel, aes(x = x, y = y, label = label, colour = colour),
family = font_tw_bold, hjust = 0.5, size = 8)
p + labs(title = "sadfasf", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") +
facet_wrap(~timeP)
ap <- p +
labs(title = "Genève chauffe", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") + transition_states(timeP, transition_length = 2, state_length = 4, wrap = F) +
enter_fade() +
exit_fade()
apa <- animate(ap, width = 620 * 1.1, height = 700 * 1.1)
anim_save("shift.gif")
# vid2 <- animate(ap,
#                renderer = ffmpeg_renderer(
#                  options = list(pix_fmt = "yuv444p16be", loop = 0)))
# save_animation(vid, "test3.mp4")
#
#
# spr <- animate(p, renderer = sprite_renderer())
# save_animation(spr, "test.html")
#
# sprite_file("sprite_test", fps=2, width = 620, height = 800, 6000)
df
df %>% arrange(desc(yAverage)
)
shift
p <- bg_chart () +
geom_xspline(data = df,
aes(x = Month, y = Temperature, group = Year, colour = colour), size = 0.07, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1), size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1, colour = colour),
size = 1, linetype = "dashed") +
geom_ribbon(data = shift,
aes(x = Month, y = y0, yend = y1),
colour = "#ff99c2") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "#b30047") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "#b30047", family = font_tw_light) +
geom_text(data = timePLabel, aes(x = x, y = y, label = label, colour = colour),
family = font_tw_bold, hjust = 0.5, size = 10)
p + labs(title = "sadfasf", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") +
facet_wrap(~timeP)
p <- bg_chart () +
geom_xspline(data = df,
aes(x = Month, y = Temperature, group = Year, colour = colour), size = 0.07, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1), size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1, colour = colour),
size = 1, linetype = "dashed") +
geom_ribbon(data = shift,
aes(x = Month, ymin = y0, ymax = y1),
colour = "#ff99c2") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "#b30047") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "#b30047", family = font_tw_light) +
geom_text(data = timePLabel, aes(x = x, y = y, label = label, colour = colour),
family = font_tw_bold, hjust = 0.5, size = 10)
p + labs(title = "sadfasf", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") +
facet_wrap(~timeP)
shift
p <- bg_chart () +
geom_xspline(data = df,
aes(x = Month, y = Temperature, group = Year, colour = colour), size = 0.07, alpha  = 0.9) +
geom_line(data = mAverageByP_bg, aes(x = Month, y = monthlyPAv, group = 1), size = 1, linetype = "dashed", alpha = 0.7) +
geom_line(data = mAverageByP,
aes(x = Month, y = monthlyPAv, group = 1, colour = colour),
size = 1, linetype = "dashed") +
geom_ribbon(data = shift,
aes(x = Month, ymin = y0, ymax = y1),
colour = "#ff99c2") +
geom_segment(data = shift,
aes(x = Month, xend = Month, y = y0, yend = y1),
size = 2, colour = "#b30047") +
geom_text(data = shiftLabel, hjust = 0, vjust = 0, nudge_x = 0.3,
aes(x = Month, y = y0, label = label),
size = 4, colour = "#b30047", family = font_tw_light) +
geom_text(data = timePLabel, aes(x = x, y = y, label = label, colour = colour),
family = font_tw_bold, hjust = 0.5, size = 10)
p + labs(title = "sadfasf", subtitle = "Températures mensuelles moyennes de 1864 à août 2018 à Genève.\nChaque année est représentée par une courbe") +
facet_wrap(~timeP)
geom_ribbon
?geom_ribbon
bg_chart <- function() {
ggplot() +
geom_hline(yintercept = 0, colour = "darkgrey", alpha = 0.5, size = 0.5) +
scale_x_discrete(name = "", position = "top", expand = c(0.1, 0.1)) +
scale_y_continuous(
name = "", expand = c(0.01, 0),
labels = function(x) paste0(x,'°'), limits = ylim, breaks = scales::pretty_breaks(n = 5)) +
theme_tam(xGridLines = T, base_size = 15) +
theme(
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y =  element_line(
color = "#c2c4d6", linetype = "dotted", size = 0.3),
plot.margin = margin(6, 4, 3, -1, "pt"),
axis.line = element_blank()
) +
scale_colour_identity()
#scale_colour_gradientn(colours = brewer.pal(7,"Reds"))
}
df %>% arrange (desc(yAverage))
df %>% arrange (desc(yAverage)) %>% .$Year
df %>% arrange (desc(yAverage)) %>% .$Year %>% unique()
library(vegalite)
install.packages(vegalite)
install.packages("vegalite")
u=vegalite(title="FOO",viewport_width=320,viewport_height=260) %>%
add_data(s)  %>%
encode_x("date", "temporal") %>%
encode_y("PctOn", "quantitative") %>%
mark_line()
library("vegalite")
u=vegalite(title="FOO",viewport_width=320,viewport_height=260) %>%
add_data(s)  %>%
encode_x("date", "temporal") %>%
encode_y("PctOn", "quantitative") %>%
mark_line()
devtools::install_github("vegalite")
devtools::install_github("hrbrmstrvegalite")
devtools::install_github("hrbrmstr/vegalite")
library(vegalite)
u=vegalite(title="FOO",viewport_width=320,viewport_height=260) %>%
add_data(s)  %>%
encode_x("date", "temporal") %>%
encode_y("PctOn", "quantitative") %>%
mark_line()
vegalite(viewport_width=400, viewport_height=400) %>%
cell_size(400, 400) %>%
add_data("https://vega.github.io/vega-editor/app/data/cars.json") %>%
encode_x("Horsepower", "quantitative") %>%
encode_y("Miles_per_Gallon", "quantitative") %>%
encode_color("Origin", "nominal") %>%
encode_shape("Origin", "nominal") %>%
mark_point()
vegalite(viewport_height=200) %>%
cell_size(400, 200) %>%
add_data("https://vega.github.io/vega-editor/app/data/cars.json") %>%
encode_x("Horsepower", "quantitative") %>%
encode_y("Cylinders", "ordinal") %>%
mark_tick()
