library(ggalt)
library(viridis)
### Interactive
library(ggiraph)
library(htmltools)
library(swiRcharts)
library(rCharts)
library(highcharter)
### Misc stuff
#require(classInt)
#require(viridis)
input.url <- 'https://www.meteosuisse.admin.ch/product/output/climate-data/homogenous-monthly-data-processing/data/homog_mo_GVE.txt'
rawData.file <- paste0("data/", basename(input.url))
if(download_meteoSuisseData) {
download.file(input.url, destfile = rawData.file)
}
# Read each txt file and save it as CSV
header <- read.table(rawData.file, skip = 27, stringsAsFactors = FALSE,
nrows = 1) %>% unlist(use.names = F)
table <- read.table(rawData.file, skip = 28, stringsAsFactors = FALSE)
colnames(table) <- header
#skim(table)
months <- structure(1:12, names = c('Jan.', 'Fév.',	'Mars',	'Avr.',	'Mai',	'Juin',	'Juil.',	'Août',	'Sept.',	'Oct.',	'Nov.',	'Déc.'))
years_average <-  c(1981, 2010)
table %<>% mutate(
Month = factor(names(months)[match(Month, months)],
levels = names(months)),
)
yAverage <- table %>%
group_by(Year) %>%
summarise(yAverage = mean(Temperature)) %>%
ungroup()
table <- left_join(table,yAverage)
ylim <- table %>% .$Temperature %>% range()
bg_chart <- function(base_size = 22) {
ggplot() +
geom_hline(yintercept = 0, colour = "darkgrey", alpha = 0.6, size = 1) +
scale_x_discrete(name = "", position = "top", expand = c(0.02, 0.1)) +
scale_y_continuous(
name = "", expand = c(0.01, 0),
labels = function(x) paste0(x,'°'), limits = ylim,
breaks = scales::pretty_breaks(n = 5)
) +
theme_tam(xGridLines = T, base_size = base_size) +
theme(
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y =  element_line(
color = "#c2c4d6", linetype = "dotted", size = 1),
plot.margin = margin(-6, 3, 0, -2, "pt"),
axis.line = element_blank()
)
#scale_colour_gradientn(colours = brewer.pal(7,"Reds"))
}
bg_chart () +
geom_xspline(data = table %>% filter(Year < 2018),
aes(x = Month, y = Temperature, group = Year, colour = Year), size = 0.1) +
geom_xspline(data = table %>% filter(Year == 2018),
aes(x = Month, y = Temperature, group = Year, colour = Year), size = 1)
if(generateVidAllYears) {
fontSize <- 50
syear <- 2010
mAverageByP <- df %>%
filter(Year >= 1981 & Year <= 2010) %>%
group_by(Month) %>%
summarise(monthlyAv = mean(Temperature))  %>%
ungroup()
col.brk <- seq(
min(df$yAverage, na.rm = T) - 0.001,
max(df$yAverage, na.rm = T) + 0.001,
length.out = length(unique(df$Year)))
colours <- viridis_pal(option = "A", direction = -1)(length(col.brk))
dff <- df %>% mutate(
# add the last colour for NA y.average, unfinished years
colour = colours[as.numeric(cut(yAverage, breaks = col.brk))]
)
yearLabel <- dff %>%
select(Year, yAverage, colour) %>%
distinct() %>%
mutate(
x = 7.15,
y = 9
)
topYears <- dff %>%
select(Year, yAverage) %>%
distinct() %>%
arrange(desc(yAverage)) %>%
head(10) %>% .$Year
moyenneMLabel <- cbind(
tibble(
x = 6, y = 3,
label = "moyenne 1981-2010"),
mAverageByP %>% filter(Month == "Mars")
)
plotSingleYear <- function(syear) {
p <- bg_chart (base_size = fontSize) +
geom_xspline(
data = dff %>% filter(Year < syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 0.2, alpha  = 0.7
) +
geom_line(
data = mAverageByP,
aes(x = Month, y = monthlyAv, group = 1),
size = 2.2, alpha  = 0.7, linetype = "dashed",
) +
geom_xspline(
data = dff %>% filter(Year == syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 3, alpha  = 1
) +
geom_text(
data = yearLabel %>% filter(Year == syear),
aes(x = x, y = y, label = Year, colour = colour),
family = font_tw_bold, hjust = 0.5, size = fontSize * 1.3,
alpha = 0.9
) +
theme(
plot.margin = margin(1, 3, 0, -2, "pt"), #margin(30, 3, 0, -2, "pt"),
plot.title = element_text(
size = fontSize, colour = "#242d75",
margin = margin(t = 5, b = 10)),
plot.subtitle = element_text(size = fontSize / 1.2, margin = margin(t = 10))
) +
geom_text(
data = moyenneMLabel, aes(x = x, y = y, label = label),
family = font_tw, hjust = 0.5, size = fontSize / 3,
vjust = -0.9, colour = "#666666"
) +
geom_curve(
data = moyenneMLabel, size = fontSize / 20,
colour = "#666666", alpha = 0.7,
aes(x = x, y = y, xend = Month, yend = monthlyAv - 0.1),
curvature = -0.8,
arrow = arrow(length = unit(0.015, "npc"), type = "closed")
) +
scale_colour_identity() #+
# labs(
#   title = "154 années de température à Genève, 1864 - 2018",
#   subtitle = "La courbe pointillée correspond à la moyenne mensuelle de 1981 à 2010.\nL'animation ralentit pour les 10 années les plus chaudes.",
#   caption = "source: MétéoSuisse | Tribune de Genève | @duc_qn"
# )
}
plots <- unique(df$Year) %>% map(~ plotSingleYear(.x))
names(plots) <- unique(df$Year)
animation::saveVideo({
for( y in names(plots)) {
cat("\t", y)
print(plots[[y]])
if(y %in% topYears) {
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
}
}
}, video.name = "anim_EveryYear_GE.mp4",
interval = 0.15,
ani.width = 620 * 2.5, ani.height = 680 * 2.5
)
}
fontSize <- 50
syear <- 2010
mAverageByP <- df %>%
filter(Year >= 1981 & Year <= 2010) %>%
group_by(Month) %>%
summarise(monthlyAv = mean(Temperature))  %>%
ungroup()
col.brk <- seq(
min(df$yAverage, na.rm = T) - 0.001,
max(df$yAverage, na.rm = T) + 0.001,
length.out = length(unique(df$Year)))
colours <- viridis_pal(option = "A", direction = -1)(length(col.brk))
dff <- df %>% mutate(
# add the last colour for NA y.average, unfinished years
colour = colours[as.numeric(cut(yAverage, breaks = col.brk))]
)
yearLabel <- dff %>%
select(Year, yAverage, colour) %>%
distinct() %>%
mutate(
x = 7.15,
y = 9
)
topYears <- dff %>%
select(Year, yAverage) %>%
distinct() %>%
arrange(desc(yAverage)) %>%
head(10) %>% .$Year
str(table)
if(generateVidAllYears) {
fontSize <- 50
syear <- 2010
mAverageByP <- table %>%
filter(Year >= 1981 & Year <= 2010) %>%
group_by(Month) %>%
summarise(monthlyAv = mean(Temperature))  %>%
ungroup()
col.brk <- seq(
min(df$yAverage, na.rm = T) - 0.001,
max(df$yAverage, na.rm = T) + 0.001,
length.out = length(unique(df$Year)))
colours <- viridis_pal(option = "A", direction = -1)(length(col.brk))
dff <- table %>%
select(-Precipitation) %>%
mutate(
# add the last colour for NA y.average, unfinished years
colour = colours[as.numeric(cut(yAverage, breaks = col.brk))]
)
yearLabel <- dff %>%
select(Year, yAverage, colour) %>%
distinct() %>%
mutate(
x = 7.15,
y = 9
)
topYears <- dff %>%
select(Year, yAverage) %>%
distinct() %>%
arrange(desc(yAverage)) %>%
head(10) %>% .$Year
moyenneMLabel <- cbind(
tibble(
x = 6, y = 3,
label = "moyenne 1981-2010"),
mAverageByP %>% filter(Month == "Mars")
)
plotSingleYear <- function(syear) {
p <- bg_chart (base_size = fontSize) +
geom_xspline(
data = dff %>% filter(Year < syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 0.2, alpha  = 0.7
) +
geom_line(
data = mAverageByP,
aes(x = Month, y = monthlyAv, group = 1),
size = 2.2, alpha  = 0.7, linetype = "dashed",
) +
geom_xspline(
data = dff %>% filter(Year == syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 3, alpha  = 1
) +
geom_text(
data = yearLabel %>% filter(Year == syear),
aes(x = x, y = y, label = Year, colour = colour),
family = font_tw_bold, hjust = 0.5, size = fontSize * 1.3,
alpha = 0.9
) +
theme(
plot.margin = margin(1, 3, 0, -2, "pt"), #margin(30, 3, 0, -2, "pt"),
plot.title = element_text(
size = fontSize, colour = "#242d75",
margin = margin(t = 5, b = 10)),
plot.subtitle = element_text(size = fontSize / 1.2, margin = margin(t = 10))
) +
geom_text(
data = moyenneMLabel, aes(x = x, y = y, label = label),
family = font_tw, hjust = 0.5, size = fontSize / 3,
vjust = -0.9, colour = "#666666"
) +
geom_curve(
data = moyenneMLabel, size = fontSize / 20,
colour = "#666666", alpha = 0.7,
aes(x = x, y = y, xend = Month, yend = monthlyAv - 0.1),
curvature = -0.8,
arrow = arrow(length = unit(0.015, "npc"), type = "closed")
) +
scale_colour_identity() #+
# labs(
#   title = "154 années de température à Genève, 1864 - 2018",
#   subtitle = "La courbe pointillée correspond à la moyenne mensuelle de 1981 à 2010.\nL'animation ralentit pour les 10 années les plus chaudes.",
#   caption = "source: MétéoSuisse | Tribune de Genève | @duc_qn"
# )
}
plots <- unique(df$Year) %>% map(~ plotSingleYear(.x))
names(plots) <- unique(df$Year)
animation::saveVideo({
for( y in names(plots)) {
cat("\t", y)
print(plots[[y]])
if(y %in% topYears) {
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
}
}
}, video.name = "anim_EveryYear_GE.mp4",
interval = 0.15,
ani.width = 620 * 2.5, ani.height = 680 * 2.5
)
}
if(generateVidAllYears) {
fontSize <- 50
syear <- 2010
mAverageByP <- table %>%
filter(Year >= 1981 & Year <= 2010) %>%
group_by(Month) %>%
summarise(monthlyAv = mean(Temperature))  %>%
ungroup()
col.brk <- seq(
min(table$yAverage, na.rm = T) - 0.001,
max(table$yAverage, na.rm = T) + 0.001,
length.out = length(unique(table$Year)))
colours <- viridis_pal(option = "A", direction = -1)(length(col.brk))
dff <- table %>%
select(-Precipitation) %>%
mutate(
# add the last colour for NA y.average, unfinished years
colour = colours[as.numeric(cut(yAverage, breaks = col.brk))]
)
yearLabel <- dff %>%
select(Year, yAverage, colour) %>%
distinct() %>%
mutate(
x = 7.15,
y = 9
)
topYears <- dff %>%
select(Year, yAverage) %>%
distinct() %>%
arrange(desc(yAverage)) %>%
head(10) %>% .$Year
moyenneMLabel <- cbind(
tibble(
x = 6, y = 3,
label = "moyenne 1981-2010"),
mAverageByP %>% filter(Month == "Mars")
)
plotSingleYear <- function(syear) {
p <- bg_chart (base_size = fontSize) +
geom_xspline(
data = dff %>% filter(Year < syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 0.2, alpha  = 0.7
) +
geom_line(
data = mAverageByP,
aes(x = Month, y = monthlyAv, group = 1),
size = 2.2, alpha  = 0.7, linetype = "dashed",
) +
geom_xspline(
data = dff %>% filter(Year == syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 3, alpha  = 1
) +
geom_text(
data = yearLabel %>% filter(Year == syear),
aes(x = x, y = y, label = Year, colour = colour),
family = font_tw_bold, hjust = 0.5, size = fontSize * 1.3,
alpha = 0.9
) +
theme(
plot.margin = margin(1, 3, 0, -2, "pt"), #margin(30, 3, 0, -2, "pt"),
plot.title = element_text(
size = fontSize, colour = "#242d75",
margin = margin(t = 5, b = 10)),
plot.subtitle = element_text(size = fontSize / 1.2, margin = margin(t = 10))
) +
geom_text(
data = moyenneMLabel, aes(x = x, y = y, label = label),
family = font_tw, hjust = 0.5, size = fontSize / 3,
vjust = -0.9, colour = "#666666"
) +
geom_curve(
data = moyenneMLabel, size = fontSize / 20,
colour = "#666666", alpha = 0.7,
aes(x = x, y = y, xend = Month, yend = monthlyAv - 0.1),
curvature = -0.8,
arrow = arrow(length = unit(0.015, "npc"), type = "closed")
) +
scale_colour_identity() #+
# labs(
#   title = "154 années de température à Genève, 1864 - 2018",
#   subtitle = "La courbe pointillée correspond à la moyenne mensuelle de 1981 à 2010.\nL'animation ralentit pour les 10 années les plus chaudes.",
#   caption = "source: MétéoSuisse | Tribune de Genève | @duc_qn"
# )
}
plots <- unique(df$Year) %>% map(~ plotSingleYear(.x))
names(plots) <- unique(df$Year)
animation::saveVideo({
for( y in names(plots)) {
cat("\t", y)
print(plots[[y]])
if(y %in% topYears) {
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
}
}
}, video.name = "anim_EveryYear_GE.mp4",
interval = 0.15,
ani.width = 620 * 2.5, ani.height = 680 * 2.5
)
}
if(generateVidAllYears) {
fontSize <- 50
syear <- 2010
mAverageByP <- table %>%
filter(Year >= 1981 & Year <= 2010) %>%
group_by(Month) %>%
summarise(monthlyAv = mean(Temperature))  %>%
ungroup()
col.brk <- seq(
min(table$yAverage, na.rm = T) - 0.001,
max(table$yAverage, na.rm = T) + 0.001,
length.out = length(unique(table$Year)))
colours <- viridis_pal(option = "A", direction = -1)(length(col.brk))
dff <- table %>%
select(-Precipitation) %>%
mutate(
# add the last colour for NA y.average, unfinished years
colour = colours[as.numeric(cut(yAverage, breaks = col.brk))]
)
yearLabel <- dff %>%
select(Year, yAverage, colour) %>%
distinct() %>%
mutate(
x = 7.15,
y = 9
)
topYears <- dff %>%
select(Year, yAverage) %>%
distinct() %>%
arrange(desc(yAverage)) %>%
head(10) %>% .$Year
moyenneMLabel <- cbind(
tibble(
x = 6, y = 3,
label = "moyenne 1981-2010"),
mAverageByP %>% filter(Month == "Mars")
)
plotSingleYear <- function(syear) {
p <- bg_chart (base_size = fontSize) +
geom_xspline(
data = dff %>% filter(Year < syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 0.2, alpha  = 0.7
) +
geom_line(
data = mAverageByP,
aes(x = Month, y = monthlyAv, group = 1),
size = 2.2, alpha  = 0.7, linetype = "dashed",
) +
geom_xspline(
data = dff %>% filter(Year == syear),
aes(x = Month, y = Temperature, group = Year, colour = colour),
size = 3, alpha  = 1
) +
geom_text(
data = yearLabel %>% filter(Year == syear),
aes(x = x, y = y, label = Year, colour = colour),
family = font_tw_bold, hjust = 0.5, size = fontSize * 1.3,
alpha = 0.9
) +
theme(
plot.margin = margin(1, 3, 0, -2, "pt"), #margin(30, 3, 0, -2, "pt"),
plot.title = element_text(
size = fontSize, colour = "#242d75",
margin = margin(t = 5, b = 10)),
plot.subtitle = element_text(size = fontSize / 1.2, margin = margin(t = 10))
) +
geom_text(
data = moyenneMLabel, aes(x = x, y = y, label = label),
family = font_tw, hjust = 0.5, size = fontSize / 3,
vjust = -0.9, colour = "#666666"
) +
geom_curve(
data = moyenneMLabel, size = fontSize / 20,
colour = "#666666", alpha = 0.7,
aes(x = x, y = y, xend = Month, yend = monthlyAv - 0.1),
curvature = -0.8,
arrow = arrow(length = unit(0.015, "npc"), type = "closed")
) +
scale_colour_identity() #+
# labs(
#   title = "154 années de température à Genève, 1864 - 2018",
#   subtitle = "La courbe pointillée correspond à la moyenne mensuelle de 1981 à 2010.\nL'animation ralentit pour les 10 années les plus chaudes.",
#   caption = "source: MétéoSuisse | Tribune de Genève | @duc_qn"
# )
}
plots <- unique(dff$Year) %>% map(~ plotSingleYear(.x))
names(plots) <- unique(dff$Year)
animation::saveVideo({
for( y in names(plots)) {
cat("\t", y)
print(plots[[y]])
if(y %in% topYears) {
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
print(plots[[y]])
}
}
}, video.name = "anim_EveryYear_GE.mp4",
interval = 0.15,
ani.width = 620 * 2.5, ani.height = 680 * 2.5
)
}
